on:
  schedule:
    # Run job every third day to ensure that caches won't be deleted
    - cron:  '5 7 */3 * *'
  push:
    braches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Lint changelog
        run: |-
          echo Checking changelog file...
          set -e
          npm ci --prefix changelog --silent
          node changelog/lint.mjs

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - make: build-linux_x86_64
            target: x86_64-unknown-linux-gnu
            docker_platform: linux/amd64
            docker_base: debian
          - make: build-linux_arm
            target: aarch64-unknown-linux-gnu
            docker_platform: linux/arm64
            docker_base: debian
          - make: build-linux_x86_64_musl
            target: x86_64-unknown-linux-musl
            docker_platform: linux/amd64
            docker_base: alpine
          - make: build-linux_arm_musl
            target: aarch64-unknown-linux-musl
            docker_platform: linux/arm64
            docker_base: alpine
          - make: build-windows_x86_64
            target: x86_64-pc-windows-gnu
          # - make: build-mac_x86_64
          #   target: x86_64-apple-darwin
          #   cache: mac_x86_64
          - make: build-mac_arm
            target: aarch64-apple-darwin
            cache: mac_arm
    steps:
      - uses: actions/checkout@master
      - name: Cache
        uses: actions/cache@v3
        with:
          key: build-${{matrix.target}}
          path: |
            ./target
            ~/.cargo
            ./cross
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2
      # Create target folder beforehand, as otherwise it would be
      # created from container and would not have right user
      - run: mkdir -p ./target
      - run: if ! ( which cargo-make &>/dev/null ) ; then cargo install cargo-make ; fi
        shell: bash
      - run: if ! ( which cross &>/dev/null ) ; then cargo make install-cross ; fi
        shell: bash
      - run: cargo make ${{ matrix.make }}
        env:
          CACHE_TO: type=gha,mode=max,scope=${{ matrix.cache }}
          CACHE_FROM: type=gha,scope=${{ matrix.cache }}
      - id: cargo-version
        if: matrix.docker_platform != null
        run: cargo make get-version-for-github
      - name: Set up Docker Buildx
        if: matrix.docker_platform != null
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        if: matrix.docker_platform != null
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        if: matrix.docker_platform != null
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/strowk/tisq
      - name: Build and push by digest
        if: matrix.docker_platform != null
        id: build-docker
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.docker_platform }}
          labels: ${{ steps.meta.outputs.labels }}
          # push: true
          file: docker/Dockerfile.${{ matrix.docker_base }}
          # tags: ghcr.io/strowk/tisq:${{ steps.cargo-version.outputs.CARGO_BUILD_VERSION }}
          outputs: type=image,name=ghcr.io/strowk/tisq,push-by-digest=true,name-canonical=true,push=true
          build-args: |
            TARGET=${{ matrix.target }}
      - name: Export digest
        if: matrix.docker_platform != null
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build-docker.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        if: matrix.docker_platform != null
        uses: actions/upload-artifact@v3
        with:
          name: digests-${{ matrix.docker_base }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
      - run: |-
          shopt -s extglob
          tar -czf tisq-${{ matrix.target }}.tar.gz target/${{ matrix.target }}/release/tisq?(.exe)
      - name: Upload build archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-build-archive
          path: tisq-${{ matrix.target }}.tar.gz
          retention-days: 1

  docker-merge:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - docker_base: debian
          - docker_base: alpine
    needs: build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests-${{ matrix.docker_base }}
          path: /tmp/digests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/strowk/tisq
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create -t ghcr.io/strowk/tisq:main-${{ matrix.docker_base }} \
            $(printf 'ghcr.io/strowk/tisq@sha256:%s ' *)          
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/strowk/tisq:main-${{ matrix.docker_base }}

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [ build, validate ]
    steps:
      - uses: actions/checkout@master
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      - name: Get version from tag
        id: tag_name
        if: >
          github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          echo ::set-output name=current_version::${GITHUB_REF#refs/tags/v}
        shell: bash
      - name: Read changelog
        id: changelog-reader
        if: >
          github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.tag_name.outputs.current_version }}
          path: ./CHANGELOG.md
      # as long as I am using customized libs and my patches are not in upstream,
      # publishing in crates would not work
      # - name: Log into crates.io
      #   if: github.event_name != 'pull_request'
      #   run: cargo login -- ${{ secrets.CRATES_IO_TOKEN }}
      #   shell: bash
      # - name: Publish crate
        # if: >
          # github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        # run: cargo publish ${{ !startsWith(github.ref, 'refs/tags/v') && '--dry-run' || '' }}
        # shell: bash
      - run: mv *-build-archive/*.tar.gz ./
      - name: Create GitHub release
        if: >
          github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog-reader.outputs.changes }}
          prerelease: ${{ startsWith(github.ref, 'refs/tags/v') && contains(github.ref_name, '-') }}
          draft: ${{ !startsWith(github.ref, 'refs/tags/v') && steps.changelog-reader.outputs.status == 'unreleased' }}
          files: |
            tisq-*.tar.gz

